name: build

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: format
        run: cargo fmt -- --check
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macOS-latest
          - ubuntu-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: build and lint with clippy
        run: cargo clippy --tests -- -D warnings
      - name: lint without default features
        run: cargo clippy --no-default-features -- -D warnings
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macOS-latest
          - ubuntu-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: test
        run: cargo test --workspace --verbose --all-features -- --skip read_table_version_hdfs
  ffi_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macOS-latest
          - ubuntu-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.30.x'
      - name: install msys2 on windows
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
      - name: Install arrow-glib
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt update
              sudo apt install -y -V ca-certificates lsb-release wget
              wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
              wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb.sha512
              sha512sum -c apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb.sha512 || exit 1
              sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
              sudo apt update
              sudo apt install -y -V libarrow-dev # For C++
              sudo apt install -y -V libarrow-glib-dev # For GLib (C)
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew install apache-arrow
              brew install apache-arrow-glib
          elif [ "$RUNNER_OS" == "Windows" ]; then
              pacman -S --noconfirm mingw-w64-ucrt-x86_64-arrow
          else
              echo "$RUNNER_OS not supported"
              exit 1
           fi
      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Set output on fail
        run: echo "CTEST_OUTPUT_ON_FAILURE=1" >> "$GITHUB_ENV"
      - name: Build kernel
        run: |
          pushd acceptance
          cargo build
          popd
          pushd ffi
          cargo b --features default-engine,sync-engine
          popd
      - name: build and run test
        run: |
          pushd ffi/examples/read-table
          mkdir build
          pushd build
          cmake ..
          make
          make test
